
// RTOS in ROM
var useROM = false;

// FPGA Testing
var useFPGA = true;

// To build with RTOS in ROM:
if (useROM)
{
  var ROM = xdc.useModule('ti.sysbios.rom.ROM');
  ROM.romName = ROM.CC2650;

  //Uncomment the following to test RTOS-ROM in a flash location
  // var CC26xx = xdc.module('ti.sysbios.rom.cortexm.cc26xx.CC26xx');
  // CC26xx.useFlash = true;
}

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Types = xdc.useModule('xdc.runtime.Types');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysCallback = xdc.useModule('xdc.runtime.SysCallback');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

//RTOS in ROM use the HeapMem module.
if (useROM)
{
  var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
}
else
{
  var HeapMin = xdc.useModule('xdc.runtime.HeapMin');
}
var Reset = xdc.useModule('xdc.runtime.Reset');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Task = xdc.useModule('ti.sysbios.knl.Task');

var Event = xdc.useModule('ti.sysbios.knl.Event');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var M3Hwi = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

/* Include Drivers and Middle Ware */
var Drivers = xdc.useModule('ti.drivers.Config');
var MW = xdc.useModule('ti.mw.Config');

// Idle Task
if ( useFPGA )
{
  // disable Idle task
  Task.enableIdleTask = false;
}
else // enable Idle task
{
  /* Enable idle task (default). */
  Task.enableIdleTask = true;
}

/* compile out all Assert's */
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;

/* Don't load string names of modules on the target */
Defaults.common$.namedModule = false;

/* Allow Mod_create() and Mod_construct() but not delete() or destruct() */
Defaults.common$.memoryPolicy = Types.CREATE_POLICY;

/* Don't load diagnostic/descriptive text strings on the target */
Text.isLoaded = false;

/* Use the minimal user-supplied callback provider */
System.SupportProxy = SysCallback;
/* no exit handlers needed */
System.maxAtexitHandlers = 0;

/* main() and Hwi, Swi stack size */
Program.stack = 512;
/* no command-line arguments main(argc, argv) needed */
Program.argSize = 0;

/* build a custom, optimized version of SYS/BIOS */
BIOS.libType = BIOS.LibType_Custom;

/* no logging - all compiled out */
BIOS.logsEnabled = false;

/* disable Asserts in SYS/BIOS code */
BIOS.assertsEnabled = false;

/* reduce number of Task priority levels to save RAM */
Task.numPriorities = 6;

/* Set the default Task stack size - used if one is not specified */
Task.defaultStackSize = 512;

/* Don't check stacks for overflow - saves cycles (and power) and Flash */
Task.checkStackFlag = false;

/* Disable exception handling to save Flash - undo during active development */
M3Hwi.enableException = true;
M3Hwi.excHandlerFunc = "&exceptionHandler";
M3Hwi.nvicCCR.UNALIGN_TRP = 0;
M3Hwi.nvicCCR.DIV_0_TRP = 0;

/* Don't check for interrupt stack overflow during Idle loop */
Hwi.checkStackFlag = false;

/* Minimize Flash and RAM usage of Error module */
Error.raiseHook = null;
Error.maxDepth = 2;

// Default CPU Frequncy
if ( useFPGA )
{
  BIOS.cpuFreq.lo = 12000000;
}
else
{
  BIOS.cpuFreq.lo = 48000000;
}

/* put reset vector at start of Flash */
M3Hwi.resetVectorAddress  = 0x0;

/* put interrupt vector at start of RAM so interrupts can be configured at runtime */
M3Hwi.vectorTableAddress  = 0x20000000;

/* CC2650 has 50 interrupts */
M3Hwi.NUM_INTERRUPTS = 50;

/* create a small "alloc-only" heap */
if(useROM)
{
  BIOS.heapSize = 1668;
}
else
{
  var heapMinParams = new HeapMin.Params;
  heapMinParams.size = 1668;
  var myHeapMin = HeapMin.create(heapMinParams);
  Memory.defaultHeapInstance = myHeapMin;
}


var Swi = xdc.useModule('ti.sysbios.knl.Swi');
Swi.numPriorities = 6;
BIOS.swiEnabled = true;

BIOS.includeXdcRuntime = true;

/* Tasks cannot pend based on priority */
Semaphore.supportsPriority = false;

/* Change default error function -- just spin */
Error.policyFxn = Error.policySpin;

/* true:  Allow runtime creation of e.g. semaphores
 * false: Compile out reference to Memory in BIOS */
BIOS.runtimeCreatesEnabled = true;

/* Abort and exit functions -- just spin */
System.abortFxn = System.abortSpin;
System.exitFxn = System.exitSpin;

/* CC26xx Boot module */
var Boot = xdc.useModule('ti.sysbios.family.arm.cc26xx.Boot');
Boot.trimDevice = true;
Boot.driverlibVersion = 2;
// Disable CC26xx Backdoor and use our own CCA
Boot.customerConfig = false;

/* Enable clock module */
BIOS.clockEnabled = true;

/* Clock tick Period set to 1 millisecond */
Clock.tickPeriod = 10;

/* Clock mode set to DYNAMIC to have tick suppression */
Clock.tickMode = Clock.TickMode_DYNAMIC;

